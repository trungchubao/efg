Terminal = (|0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,+,-,*,\,=,",',%,<,>,/,&,^,!,(,),[,],~,?,:,;,{,}|)
Non-terminal = (|DIGIT,LETTER,HEXA,E1,SIGN,DD,EE,FS,IS1,IS,AUTO,BREAK,CASE,CHAR,CONST,CONTINUE,DEFAULT,DO,DOUBLE,ELSE,ENUM,EXTERN,FLOAT,FOR,GOTO,IF,INT,LONG,REGISTER,RETURN,SHORT,SIGNED,SIZEOF,STATIC,STRUCT,SWITCH,TYPEDEF,UNION,UNSIGNED,VOID,VOLATILE,WHILE,POINT,COMMA,OR,EQ,DOUBLE_QT,LD,IDENTIFIER,TYPE_NAME,ELIPSIS,XX,HH,CONSTANT,ANY_CHAR,STRING_CONST1,STRING_CONST,STRING_LITERAL,RIGHT_ASSIGN,LEFT_ASSIGN,ADD_ASSIGN,SUB_ASSIGN,MUL_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN,RIGHT_OP,LEFT_OP,INC_OP,DEC_OP,PTR_OP,AND_OP,OR_OP,LE_OP,GE_OP,EQ_OP,NE_OP,primary_expr,postfix_expr,argument_expr_list,unary_expr,unary_operator,cast_expr,multiplicative_expr,additive_expr,shift_expr,relational_expr,equality_expr,and_expr,exclusive_or_expr,inclusive_or_expr,logical_and_expr,logical_or_expr,conditional_expr,assignment_expr,assignment_operator,expr,constant_expr,declaration,declaration_specifiers,init_declarator_list,init_declarator,storage_class_specifier,type_specifier,struct_or_union_specifier,struct_or_union,struct_declaration_list,struct_declaration,struct_declarator_list,struct_declarator,enum_specifier,enumerator_list,enumerator,declarator,declarator2,pointer,type_specifier_list,parameter_identifier_list,identifier_list,parameter_type_list,parameter_list,parameter_declaration,type_name,abstract_declarator,abstract_declarator2,initializer,initializer_list,statement,labeled_statement,compound_statement,declaration_list,statement_list,expression_statement,selection_statement,iteration_statement,jump_statement,file,external_definition,function_definition,function_body,identifier|)
DIGIT = 0|1|2|3|4|5|6|7|8|9
LETTER = a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|_
HEXA = a|b|c|d|e|f|A|B|C|D|E|F|0|1|2|3|4|5|6|7|8|9
E1 = E|e
SIGN = "+"|"-"
DD = DIGIT.DIGIT|DIGIT
EE = E1.SIGN.DD|E1.DD
FS = f|F|l|L
IS1 = u|U|l|L
IS = IS.IS1|IS1
AUTO = "auto"
BREAK = "break"
CASE = "case"
CHAR = "char"
CONST = "const"
CONTINUE = "continue"
DEFAULT = "default"
DO = "do"
DOUBLE = "double"
ELSE = "else"
ENUM = "enum"
EXTERN = "extern"
FLOAT = "float"
FOR = "for"
GOTO = "goto"
IF = "if"
INT = "int"
LONG = "long"
REGISTER = "register"
RETURN = "return"
SHORT = "short"
SIGNED = "signed"
SIZEOF = "sizeof"
STATIC = "static"
STRUCT = "struct"
SWITCH = "switch"
TYPEDEF = "typedef"
UNION = "union"
UNSIGNED = "unsigned"
VOID = "void"
VOLATILE = "volatile"
WHILE = "while"
POINT = "."
COMMA = ","
OR = "|"
EQ = "="
DOUBLE_QT = """
LD = LETTER|DIGIT|LD.LD
IDENTIFIER = LETTER|LETTER.LD
TYPE_NAME = IDENTIFIER
ELIPSIS = "..."
XX = x|X
HH = HEXA|HH.HH
CONSTANT = 0.XX.HH.IS|0.XX.HH|0.XX.HH|0.DD.IS|0.DD|DD.IS|DD|DD.EE.FS|DD.EE|DD.POINT.DD.EE.FS|DD.POINT.DD.EE|DD.POINT.DD.FS|DD.POINT.DD|POINT.DD.EE.FS|POINT.DD.EE|POINT.DD.FS|POINT.DD|DD.POINT.EE.FS|DD.POINT.EE|DD.POINT.FS|DD.POINT
ANY_CHAR = LETTER|DIGIT|POINT|COMMA|OR|EQ|*|'|%|SIGN|/|>|<|&|^|!
STRING_CONST1 = \.ANY_CHAR|\.DOUBLE_QT
STRING_CONST = STRING_CONST1|STRING_CONST.STRING_CONST1
STRING_LITERAL = DOUBLE_QT.STRING_CONST.DOUBLE_QT|DOUBLE_QT.DOUBLE_QT
RIGHT_ASSIGN = ">>="
LEFT_ASSIGN = "<<="
ADD_ASSIGN = "+="
SUB_ASSIGN = "-="
MUL_ASSIGN = "*="
DIV_ASSIGN = "/="
MOD_ASSIGN = "%="
AND_ASSIGN = "&="
XOR_ASSIGN = "^="
OR_ASSIGN = OR.EQ
RIGHT_OP = ">>"
LEFT_OP = "<<"
INC_OP = "++"
DEC_OP = "--"
PTR_OP = "->"
AND_OP = "&&"
OR_OP = "||"
LE_OP = "<="
GE_OP = ">="
EQ_OP = "=="
NE_OP = "!="
primary_expr = identifier|CONSTANT|STRING_LITERAL|(.expr.)
postfix_expr = primary_expr|postfix_expr.[.expr.]|postfix_expr.(.)|postfix_expr.(.argument_expr_list.)|postfix_expr.POINT.identifier|postfix_expr.PTR_OP.identifier|postfix_expr.INC_OP|postfix_expr.DEC_OP
argument_expr_list = assignment_expr|argument_expr_list.COMMA.assignment_expr
unary_expr = postfix_expr|INC_OP.unary_expr|DEC_OP.unary_expr|unary_operator.cast_expr|SIZEOF.unary_expr|SIZEOF.(.type_name.)
unary_operator = "&"|"*"|"+"|"-"|"~"|"!"
cast_expr = unary_expr|(.type_name.).cast_expr
multiplicative_expr = cast_expr|multiplicative_expr.*.cast_expr|multiplicative_expr./.cast_expr|multiplicative_expr.%.cast_expr
additive_expr = multiplicative_expr|additive_expr.+.multiplicative_expr|additive_expr.-.multiplicative_expr
shift_expr = additive_expr|shift_expr.LEFT_OP.additive_expr|shift_expr.RIGHT_OP.additive_expr
relational_expr = shift_expr|relational_expr.<.shift_expr|relational_expr.>.shift_expr|relational_expr.LE_OP.shift_expr|relational_expr.GE_OP.shift_expr
equality_expr = relational_expr|equality_expr.EQ_OP.relational_expr|equality_expr.NE_OP.relational_expr
and_expr = equality_expr|and_expr.&.equality_expr
exclusive_or_expr = and_expr|exclusive_or_expr.^.and_expr
inclusive_or_expr = exclusive_or_expr|inclusive_or_expr.OR.exclusive_or_expr
logical_and_expr = inclusive_or_expr|logical_and_expr.AND_OP.inclusive_or_expr
logical_or_expr = logical_and_expr|logical_or_expr.OR_OP.logical_and_expr
conditional_expr = logical_or_expr|logical_or_expr.?.logical_or_expr.:.conditional_expr
assignment_expr = conditional_expr|unary_expr.assignment_operator.assignment_expr
assignment_operator = EQ|MUL_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN
expr = assignment_expr|expr.COMMA.assignment_expr
constant_expr = conditional_expr
declaration = declaration_specifiers.;|declaration_specifiers.init_declarator_list.;
declaration_specifiers = storage_class_specifier|storage_class_specifier.declaration_specifiers|type_specifier|type_specifier.declaration_specifiers
init_declarator_list = init_declarator|init_declarator_list.COMMA.init_declarator
init_declarator = declarator|declarator.EQ.initializer
storage_class_specifier = TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
type_specifier = CHAR|SHORT|INT|LONG|SIGNED|UNSIGNED|FLOAT|DOUBLE|CONST|VOLATILE|VOID|struct_or_union_specifier|enum_specifier|TYPE_NAME
struct_or_union_specifier = struct_or_union.identifier.{.struct_declaration_list.}|struct_or_union.{.struct_declaration_list.}|struct_or_union.identifier
struct_or_union = STRUCT|UNION
struct_declaration_list = struct_declaration|struct_declaration_list.struct_declaration
struct_declaration = type_specifier_list.struct_declarator_list.;
struct_declarator_list = struct_declarator|struct_declarator_list.COMMA.struct_declarator
struct_declarator = declarator|:.constant_expr|declarator.:.constant_expr
enum_specifier = ENUM.{.enumerator_list.}|ENUM.identifier.{.enumerator_list.}|ENUM.identifier
enumerator_list = enumerator|enumerator_list.COMMA.enumerator
enumerator = identifier|identifier.EQ.constant_expr
declarator = declarator2|pointer.declarator2
declarator2 = identifier|(.declarator.)|declarator2.[.]|declarator2.[.constant_expr.]|declarator2.(.)|declarator2.(.parameter_type_list.)|declarator2.(.parameter_identifier_list.)
pointer = *|*.type_specifier_list|*.pointer|*.type_specifier_list.pointer
type_specifier_list = type_specifier|type_specifier_list.type_specifier
parameter_identifier_list = identifier_list|identifier_list.COMMA.ELIPSIS
identifier_list = identifier|identifier_list.COMMA.identifier
parameter_type_list = parameter_list|parameter_list.COMMA.ELIPSIS
parameter_list = parameter_declaration|parameter_list.COMMA.parameter_declaration
parameter_declaration = type_specifier_list.declarator|type_name
type_name = type_specifier_list|type_specifier_list.abstract_declarator
abstract_declarator = pointer|abstract_declarator2|pointer.abstract_declarator2
abstract_declarator2 = (.abstract_declarator.)|[.]|[.constant_expr.]|abstract_declarator2.[.]|abstract_declarator2.[.constant_expr.]|(.)|(.parameter_type_list.)|abstract_declarator2.(.)|abstract_declarator2.(.parameter_type_list.)
initializer = assignment_expr|{.initializer_list.}|{.initializer_list.COMMA.}
initializer_list = initializer|initializer_list.COMMA.initializer
statement = labeled_statement|compound_statement|expression_statement|selection_statement|iteration_statement|jump_statement
labeled_statement = identifier.:.statement|CASE.constant_expr.:.statement|DEFAULT.:.statement
compound_statement = {.}|{.statement_list.}|{.declaration_list.}|{.declaration_list.statement_list.}
declaration_list = declaration|declaration_list.declaration
statement_list = statement|statement_list.statement
expression_statement = ;|expr.;
selection_statement = IF.(.expr.).statement|IF.(.expr.).statement.ELSE.statement|SWITCH.(.expr.).statement
iteration_statement = WHILE.(.expr.).statement|DO.statement.WHILE.(.expr.).;|FOR.(.;.;.).statement|FOR.(.;.;.expr.).statement|FOR.(.;.expr.;.).statement|FOR.(.;.expr.;.expr.).statement|FOR.(.expr.;.;.).statement|FOR.(.expr.;.;.expr.).statement|FOR.(.expr.;.expr.;.).statement|FOR.(.expr.;.expr.;.expr.).statement
jump_statement = GOTO.identifier.;|CONTINUE.;|BREAK.;|RETURN.;|RETURN.expr.;
file = external_definition|file.external_definition
external_definition = function_definition|declaration
function_definition = declarator.function_body|declaration_specifiers.declarator.function_body
function_body = compound_statement|declaration_list.compound_statement
identifier = IDENTIFIER